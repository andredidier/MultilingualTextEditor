/*
 * generated by Xtext 2.12.0
 */
package com.andredidier.multilingualtexteditor.scoping

import com.andredidier.multilingualtexteditor.multilingualTextEditor.Text
import com.andredidier.multilingualtexteditor.multilingualTextEditor.TextualContent
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

import static com.andredidier.multilingualtexteditor.multilingualTextEditor.MultilingualTextEditorPackage.Literals.*
import com.andredidier.multilingualtexteditor.multilingualTextEditor.LocalizedText
import org.eclipse.xtext.scoping.IScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MultilingualTextEditorScopeProvider extends AbstractMultilingualTextEditorScopeProvider {
	override getScope(EObject context, EReference reference) {
		if (context instanceof TextualContent) {
			return context.getScopeForTextualContent(reference)
		} else if (context instanceof LocalizedText) {
			return context.getScopeForLocalizedText(reference)
		} else {
			return super.getScope(context, reference)
		}
	}
	
	def IScope getScopeForLocalizedText(LocalizedText context, EReference reference) {
		return super.getScope(context, reference)
	}

	def IScope getScopeForTextualContent(TextualContent context, EReference reference) {
		if (reference == TEXTUAL_CONTENT__MODELS) {
			var result = delegateGetScope(context, reference)
			val parent = context.eContainer
			if (parent instanceof Text) {
				val models = (parent as Text).models
				return Scopes::scopeFor(models, result)
			} else
				return result
		} else
			return delegateGetScope(context, reference)
	}

}
