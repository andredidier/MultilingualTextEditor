/*
 * generated by Xtext 2.12.0
 */
package com.andredidier.multilingualtexteditor.generator

import com.andredidier.multilingualtexteditor.multilingualTextEditor.BasicConfiguration
import com.andredidier.multilingualtexteditor.multilingualTextEditor.ElementMdConfiguration
import com.andredidier.multilingualtexteditor.multilingualTextEditor.LocalizedText
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Sentence
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Text
import com.andredidier.multilingualtexteditor.multilingualTextEditor.TextualContent
import org.eclipse.emf.common.util.EList

import static extension com.andredidier.multilingualtexteditor.generator.ConfigurationExtensions.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MarkdownGenerator {

	def String applyModifier(String m, String text) {
		switch m {
			case 'bold': '''**«text»**'''
			case 'italics': '''_«text»_'''
			default: '''«text»'''
		}
	}
	
	def String compile(Sentence w) {
		var t = w.value;
		for(m : w.modifier) {
			t = m.applyModifier(t);
		}
		'''«t» '''
	}
	
	def String compile(TextualContent c, EList<ElementMdConfiguration> configs, BasicConfiguration bc) {
		if (c.hasContents(bc) && configs.findFirst(c.element.elementMdConfigurationFilter).nullSafe[!it.hide]) {
			val mdConfig = configs.findFirst(c.element.elementMdConfigurationFilter)
			val prefix = mdConfig.nullSafe[it.prefix] 
			val suffix = mdConfig.nullSafe[it.suffix] 
			if (c.children.empty) {
				val lt = c.values.findFirst(bc.localizedTextFilter);
				if (!lt.hiddenContent) {
					'''«prefix»«lt.compile»«suffix»'''	
				}
			} else {
				'''«prefix»«FOR child : c.children»«child.compile(configs, bc)»«ENDFOR»«suffix»'''
			}
		} else {
			null
		}
	}
	
	def String compile(LocalizedText langContents) {
		'''
		«FOR w : langContents.values»«w.compile»«ENDFOR»
		'''
	}
	
	def String compile(Text t, EList<ElementMdConfiguration> configs, BasicConfiguration bc) {
		'''
		«FOR c : t.textualContents»«c.compile(configs, bc)»«"\n"»«ENDFOR» 
		'''
	}
	
}
