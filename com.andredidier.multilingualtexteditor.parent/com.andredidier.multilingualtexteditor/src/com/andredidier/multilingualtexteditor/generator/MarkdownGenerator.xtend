/*
 * generated by Xtext 2.12.0
 */
package com.andredidier.multilingualtexteditor.generator

import com.andredidier.multilingualtexteditor.multilingualTextEditor.Language
import com.andredidier.multilingualtexteditor.multilingualTextEditor.LocalizedText
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Model
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Sentence
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Text
import com.andredidier.multilingualtexteditor.multilingualTextEditor.TextualContent
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import static extension com.andredidier.multilingualtexteditor.generator.GeneratedResourcesFileName.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MarkdownGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (t:resource.allContents.toIterable.filter(Text)) {
			t.generate([l,m|
				fsa.generateFile(resource.URI.lastSegment.replace(".mte", "") + "_" + l.suffix(m) + '.md', t.compile(l, m))
			])
		}
	}
	
	def String applyModifier(String m, String text) {
		switch m {
			case 'bold': '''**«text»**'''
			case 'italics': '''_«text»_'''
			default: '''«text»'''
		}
	}
	
	def String compile(Sentence w) {
		var t = w.value;
		for(m : w.modifier) {
			t = m.applyModifier(t);
		}
		'''«t» '''
	}
	
	def String compile(TextualContent c, Language lc, Model model) {
		if (!c.hiddenContent && (c.models.isEmpty || c.models.map[it.name].contains(model.name))) {
			val prefix = if (c.element.mdConfig !== null) c.element.mdConfig.prefix else ""
			val suffix = if (c.element.mdConfig !== null) c.element.mdConfig.suffix else ""
			'''«prefix»«FOR langContents : c.values»«langContents.compile(lc)»«ENDFOR»«suffix»'''
		} else {
			null
		}
	}
	
	def String compile(LocalizedText langContents, Language lc) {
		if (!langContents.hiddenContent)
			'''
			«FOR w : langContents.values»«IF langContents.language.name.equals(lc.name)»«w.compile»«ENDIF»«ENDFOR»
			'''
	}
	
	def String compile(Text t, Language lc, Model m) {
		'''
		«FOR c : t.textualContents»«c.compile(lc, m)»«"\n"»«ENDFOR» 
		'''
	}
	
}
