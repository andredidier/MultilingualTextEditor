/*
 * generated by Xtext 2.12.0
 */
package com.andredidier.multilingualtexteditor.generator

import com.andredidier.multilingualtexteditor.multilingualTextEditor.CountryCode
import com.andredidier.multilingualtexteditor.multilingualTextEditor.LanguageCode
import com.andredidier.multilingualtexteditor.multilingualTextEditor.LocalizedText
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Text
import com.andredidier.multilingualtexteditor.multilingualTextEditor.TextualContent
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Words
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class HtmlGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(lc : resource.allContents.toIterable.filter(LanguageCode)) {
			var suffix = lc.value;
			if (lc.countryCode!==null) {
				suffix += "_" + lc.countryCode.value;
				if (lc.countryCode.variantCode!==null) {
					suffix += "_" + lc.countryCode.variantCode;
				}
			}
			
			for (t:resource.allContents.toIterable.filter(Text)) {
				fsa.generateFile(resource.URI.lastSegment.replace(".mte", "") + "_" + suffix + '.html', t.compile(lc))	
			}
		}
		
	}
	
	def String applyModifier(String m, String text) {
		switch m {
			case 'bold': '''<b>«text»</b>'''
			case 'italics': '''<i>«text»</i>'''
			case 'underline': '''<u>«text»</u>'''
			case 'strikethrough': '''<strike>«text»</strike>'''
			default: text
		}
	}
	
	def String compile(Words w) {
		var t = w.value;
		for(m : w.modifier) {
			t = m.applyModifier(t);
		}
		'''«t» '''
	}
	
	def boolean equivalent(CountryCode c1, CountryCode c2) {
		if (c1.value != c2.value) return false;
		if (c1.variantCode === null) {
			return c2.variantCode === null;
		} else {
			return c1.variantCode === c2.variantCode;
		}
	}
	
	def boolean equivalent(LanguageCode l1, LanguageCode l2) {
		if (l1.value != l2.value) return false;
		if (l1.countryCode === null) {
			return l2.countryCode === null; 
		} else {
			return l1.countryCode.equivalent(l2.countryCode);
		}
	}
	
	def String compile(TextualContent c, LanguageCode lc) {
		'''«FOR langContents : c.values»«langContents.compile(lc)»«ENDFOR»'''
	}
	
	def String applyType(TextualContent c, String text) {
		switch c.type {
			case 'title': '''<p class="title">«text»</p>'''
			case 'heading1': '''<h1>«text»</h1>'''
			case 'heading2': '''<h2>«text»</h2>'''
			case 'heading3': '''<h3>«text»</h3>'''
			case 'paragraph': '''<p>«text»</p>'''
			default: text
		}
	}
	
	def String compile(LocalizedText langContents, LanguageCode lc) {
		'''
		«FOR w : langContents.values»«IF langContents.languageCode.equivalent(lc)»«w.compile»«ENDIF»«ENDFOR»
		'''
	}
	
	def String compile(Text t, LanguageCode lc) {
		'''
		<html>
		<body>
		«FOR c : t.textualContents»«c.applyType(c.compile(lc))»«ENDFOR»
		</body>
		</html> 
		'''
	}
	
}
