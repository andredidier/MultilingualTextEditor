/*
 * generated by Xtext 2.12.0
 */
package com.andredidier.multilingualtexteditor.generator

import com.andredidier.multilingualtexteditor.multilingualTextEditor.BasicConfiguration
import com.andredidier.multilingualtexteditor.multilingualTextEditor.ElementHtmlConfiguration
import com.andredidier.multilingualtexteditor.multilingualTextEditor.HtmlConfiguration
import com.andredidier.multilingualtexteditor.multilingualTextEditor.LocalizedText
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Sentence
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Text
import com.andredidier.multilingualtexteditor.multilingualTextEditor.TextualContent
import java.util.function.Function
import org.eclipse.emf.common.util.EList

import static extension com.andredidier.multilingualtexteditor.generator.ConfigurationExtensions.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class HtmlGenerator {

	def String applyModifier(String m, String text) {
		switch m {
			case 'bold': '''<b>«text»</b>'''
			case 'italics': '''<i>«text»</i>'''
			case 'underline': '''<u>«text»</u>'''
			default:
				text
		}
	}

	def String compile(Sentence w) {
		var t = w.value;
		for (m : w.modifier) {
			t = m.applyModifier(t);
		}
		'''«t» '''
	}

	def String compile(TextualContent c, EList<ElementHtmlConfiguration> configs, BasicConfiguration bc) {
		if (c.hasContents(bc)) {
			val htmlConfig = configs.findFirst(c.element.elementHtmlConfigurationFilter)
			if (c.children.isEmpty) {
				val lt = c.values.findFirst(bc.localizedTextFilter);
				if (!lt.hiddenContent) {
					'''«htmlConfig.opening»«lt.compile»«htmlConfig.closing»'''
				}

			} else
				'''«htmlConfig.opening»«FOR child : c.children»«child.compile(configs, bc)»«ENDFOR»«htmlConfig.closing»'''
		}
	}

	def opening(ElementHtmlConfiguration tc) {
		'''<«tc.htmlElement»«tc.classes»>'''
	}

	def classes(ElementHtmlConfiguration config) {
		'''«IF !config.htmlClassNames.empty» class="«FOR cn : config.htmlClassNames»«cn»«ENDFOR»"«ENDIF»'''
	}

	def closing(ElementHtmlConfiguration tc) {
		'''</«tc.htmlElement»>'''
	}

	def String compile(LocalizedText langContents) {
		'''«FOR w : langContents.values»«w.compile»«ENDFOR»'''
	}

	def filterByConfig(EList<TextualContent> contents, HtmlConfiguration config,
		Function<ElementHtmlConfiguration, Boolean> f) {
		return contents.filter([tc|f.apply(config.configs.findFirst[it.element.equals(tc.element)])])
	}

	def String compile(Text t, EList<ElementHtmlConfiguration> configs, BasicConfiguration bc) {
		'''
			<html>
			<head>
				<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
				«FOR c : t.textualContents.filter(configs.filter[it.header].textualContentFilter)»«c.compile(configs, bc)»«ENDFOR»
			</head> 
			<body>
				«FOR c : t.textualContents.filter(configs.filter[it.body].textualContentFilter)»«c.compile(configs, bc)»«ENDFOR»
			</body>
			<footer>
				«FOR c : t.textualContents.filter(configs.filter[it.footer].textualContentFilter)»«c.compile(configs, bc)»«ENDFOR»
			</footer>
			</html> 
		'''
	}

}
