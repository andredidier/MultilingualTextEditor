/*
 * generated by Xtext 2.12.0
 */
package com.andredidier.multilingualtexteditor.generator

import com.andredidier.multilingualtexteditor.multilingualTextEditor.BasicConfiguration
import com.andredidier.multilingualtexteditor.multilingualTextEditor.Text
import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MultilingualTextEditorGenerator extends AbstractGenerator {

	@Inject
	extension PlainTextGenerator plainText;
	@Inject
	extension MarkdownGenerator markdown;
	@Inject
	extension HtmlGenerator html;
	@Inject
	extension JavaWordGenerator word;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (t : resource.allContents.toIterable.filter(Text)) {
			t.generate(resource, fsa, context)
		}
	}
	
	def generate(Text t, Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		t.outputConfigs.plainConfigs.forEach[pc|
			pc.basicConfigs.forEach[
				t.generate(it, resource, fsa, context, t.compile(pc.configs, it))	
			]
			
		]
		t.outputConfigs.wordConfigs.forEach[wc|
			wc.basicConfigs.forEach[
				t.generate(it, resource, fsa, context, t.compile(wc.configs, it))	
			]
			
		]
		t.outputConfigs.htmlConfigs.forEach[hc|
			hc.basicConfigs.forEach[
				t.generate(it, resource, fsa, context, t.compile(hc.configs, it))	
			]
		]
		t.outputConfigs.mdConfigs.forEach[mc|
			mc.basicConfigs.forEach[
				t.generate(it, resource, fsa, context, t.compile(mc.configs, it))	
			]
		]
	}

	def static generate(
		Text t,
		BasicConfiguration c,
		Resource resource,
		IFileSystemAccess2 fsa,
		IGeneratorContext context,
		String compiled
	) {
		fsa.generateFile(c.buildFileName(resource.URI.lastSegment.replace(".mte", "")), compiled)
	}

	def static buildFileName(BasicConfiguration c, String originalFileName) {
		return String.format(c.fileNameTemplate, originalFileName)
	}

}
